module sensor_01_MEF(clock, request, dht_data, information, info_fineshed);
    input clock; //entrada de clock
    input [1:0] request;    //entrada recebida pela maquina principal, sobre a requisição desejada
    inout dht_data; //entrada e saida dos dados recebidos pelo sensor
    output reg [7:0] information; //saida para a outra maquina de estados
    output info_fineshed;


    localparam [1:0] s_idle = 2'b00, s_receiver_data = 2'b01, s_error_sensor = 2'b10, s_send_data = 2'b11;

    reg [1:0] choose_case;



    wire [7:0] hum_int, hum_float, temp_int, temp_float, check_sum;
    wire readout_done, wait_sensor, debug_sensor, error_sensor;
    
    reg enable_sensor, rst_sensor;
    
    //Chamada antiga do DHT11 com o antigo codigo - ps o codigo funcionava, mas o seu problema era na Leitura
    //DHT11 dht11_comunication (clock, enable_sensor, rst_sensor, dht_data, hum_int, hum_float, temp_int, temp_float, check_sum, wait_sensor, debug_sensor, error_sensor, readout_done);

    //NOVO DHT11 - by china
    /*
    Seu funcionamento:
        recebe clock de 1MHZ
        precisa de um sinal de start
        precisa de um sinal de reset
        entrada e saida na mesma porta para a comunicação c o DHT11
        saida com os dados, os 40 bits totais
        saida de erro - se for 1 = erro, se for 0 = sem erro
            ESTA SAIDA ABAIXO É IMPORTANTE PARA O CONTROLE DAS MAQUINAS DE ESTADOS
            COM ELE TEM O CONTROLE PARA NAO MUDAR DE ESTADO ENQUANTO AINDA NAO RECEBEU
            O DADO DO DHT11
        saida para afirmar que terminou de receber o dado, ou seja um "done" 
    
        ele pega o sinal de clock, precisa do start para iniciar e de um reset
        logo, passar um sinal de reset, e depois um sinal de start
            ps: possa ser q essa ordem precise alterar
        depois de um tempo, pode pegar os dados e salvar 
        ele entrega todos os 40 bits juntos, precisa separar
        ele ja faz o check sum p informar se teve erro ou nao
    
    */
/* CODIGO ABAIXO PARA O FUNCIONAMENTO DO DHT11 ANTIGO, ADAPTAÇÕES PARA O NOVO
DHT11_Made_in_china ESTARÃO MAIS ABAIXO
    always @(posedge clock)
    begin
        case(choose_case)
            s_idle:
                begin
                    if(request == 2'b00 || resquest == 2'b01 || request == 2'b10)
                        begin
                            en_dht11 <= 1'b1; // Ativa o sensor
						    r_Rst <= 1'b1; // Dar-se um sinal de rst para iniciar a obtenção de dados
                            choose_case <= s_receiver_data;
                        end
                    else
                        begin
                            //possa ser que precise informar que o request chegou errado
                            choose_case <= s_idle;
                        end
                end   
            s_receiver_data:
                rst_sensor <=1'b0;
                begin
                    if(readout_done == 1'b1)
                        begin
                        if(request == 2'b00)
                            begin
                                information <=hum_int;
                            end
                        if(request <= 2'b01)
                            begin
                                information <= temp_int;
                            end
                        if(request <= 2'b10)
                            begin
                                if(error_sensor == 1'b0) //sem error, sensor normal
                                    begin
                                        information <= 8'b00000000;
                                    end
                                else //sensor com problema
                                    begin 
                                        information <= 8'b11111111;
                                    end
                            end
                        end
                        else
                            begin
                                choose_case <=s_reading;
                            end
                end
            s_error_sensor:
                begin
                
                end
            s_send_data:
                begin
                
                end
            default: 
                choose_case <= s_idle;
    end
*/
    wire to_receiver;
    wire [39:0] data_dht11;
    reg active_timer_reset = 1'b0;
    timer_pulso_reset reset_pulse_timer (clock, active_timer_reset,to_receiver);
    DHT11_Made_in_china dht11_sensor(clock, en_dht11, rst_sensor, dht_data, data_dht11, error_sensor, readout_done);


    wire [7:0] umidade_int, temp_int;

    /*
    V 0. fazer a chamada do modulo do DHT11 made in china
    pensar sobre  1. fazer a tx daqui para envio dos dados
    V  2. terminar os sends
    V 3. sincronizar questões de pedidos e envios de dados - fazer a seleção
    V  4. condicional para caso de erro
      5. colocar o modulo de clock p o dht11 dentro dele mesmo = simplificar
    */ 
    
    
    //PARTE ADAPTADA PARA O DHT11 NOVO
    always @(posedge clock)
    begin
        case(choose_case)
            s_idle:
                begin
                    info_fineshed = 1'b0;
                    if(request == 2'b00 || resquest == 2'b01 || request == 2'b10)
                        begin
                            active_timer_reset <=1'b1;
                            en_dht11 <= 1'b1; // Ativa o sensor
                            rst_sensor <= 1'b1; // Sinal de reset para apagar os dados em buffer, e começar a leitura
                            if(to_receiver == 1'b1)
                                begin
                                    choose_case <= s_receiver_data;
                                end
                            else
                                begin
                                    choose_case <= s_idle;
                                end
                            
                        end
                    else //possa ser que precise informar que o request chegou errado
                        //mas como ta lidando com fio dentro do proprio sistema, isso nao deve acontecer
                        begin
                            en_dht11 <= 1'b0;
                            rst_sensor <= 1'b0;
                            active_timer_reset <=1'b0;
                            choose_case <= s_idle;
                        end
                end   
            s_receiver_data:
                begin
                    active_timer_reset <=1'b0;
                    rst_sensor <=1'b0; //o sinal de reset tem ser apenas 1 pulso tipo butao
                    if(readout_done == 1'b1)
                        begin
                        if(request == 2'b00) //request de umidade
                            begin
                                information[7] <= data_dht11[0];
                                information[6] <= data_dht11[1];
                                information[5] <= data_dht11[2];
                                information[4] <= data_dht11[3];
                                information[3] <= data_dht11[4];
                                information[2] <= data_dht11[5];
                                information[1] <= data_dht11[6];
                                information[0] <= data_dht11[7];
                                info_fineshed = 1'b1;
                                choose_case <= s_idle;
                            end
                        if(request <= 2'b01) //request de temperatura
                            begin
                                information[7] <= data_dht11[16];
                                information[6] <= data_dht11[17];
                                information[5] <= data_dht11[18];
                                information[4] <= data_dht11[19];
                                information[3] <= data_dht11[20];
                                information[2] <= data_dht11[21];
                                information[1] <= data_dht11[22];
                                information[0] <= data_dht11[23];
                                info_fineshed = 1'b1;
                                choose_case <= s_idle;
                            end
                        if(request <= 2'b10)
                            begin
                                if(error_sensor == 1'b0) //sem error, sensor normal
                                    begin
                                        information <= 8'b00000000;
                                        info_fineshed = 1'b0;
                                        choose_case <= s_idle;
                                    end
                                else //sensor com problema
                                    begin 
                                        information <= 8'b11111111;
                                        info_fineshed = 1'b0;
                                        choose_case <= s_idle;
                                    end
                            end
                        end
                        else
                            begin
                                choose_case <=s_reading;
                            end
                end
                //pode nao precisar desses estados e descrições abaixo
            s_error_sensor:
                begin
                    //colocar questao da uart tx aq para mandar os dados de que teve erro
                    //choose_case <= s_idle; //volta para o estado de espera depois de ter mandado o erro
                end
            s_send_data:
                begin
                    //chamada da uart tx para mandar a informação
                end
            default: 
                choose_case <= s_idle;
    end


endmodule


//deixar o reset o tempo aceso necessario, antes de mudar de estado e desativa-lo
module timer_pulso_reset(clock, activate, next_state);
    input clock;
    output next_state;

    reg [59:0] counter = 59'd0;

    always @(posedge clock)
        begin
            if(activate == 1'b1)
                begin 
                    if(counter == 59'b111111111111111111111111111111111111111111111111111111111111)
                        begin
                            next_state <= 1'b1;
                        end
                    else
                        begin
                            next_state <=1'b0;
                            counter = counter + 1'b1;
                        end
                end
            else
                begin
                    next_state <=1'b0;
                end
        end

endmodule 